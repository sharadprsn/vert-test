/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */




plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id("org.beryx.runtime") version "1.12.7"
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    // This dependency is used by the application.
    implementation("io.vertx:vertx-core:4.3.2")
    implementation 'com.google.guava:guava:31.0.1-jre'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'org.apache.logging.log4j:log4j-api:2.11.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.11.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'

}

mainClassName='com.xxx.sample.App'

application {
    // Define the main class for the application.
    mainClass = 'com.xxx.sample.App'
    applicationName = 'hello'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/*shadowJar {
    manifest{
        attributes 'Main-class': 'com.crazybit.sample1.App'
    }
}*/

jar {
    manifest {
        attributes 'Implementation-Title': "non-modular-hello",
                'Main-Class': 'com.crazybit.sample1.App'
    }
}

runtime {
    modules = ['java.naming', 'java.xml']
    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            imageOptions = ['--win-console']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'non-modular-hello','--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'non-modular-hello']
            installerType = 'dmg'
        }
    }
}

tasks.jpackage.doFirst {
    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    def basePath = currentOs.windows ? project.name : currentOs.linux ? "$project.name/lib" : "${project.name}.app/Contents"
    copy {
        from('src/main/resources')
        into("$buildDir/jpackage/$basePath/app")
    }
}
